#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –¥–ª—è Kleinanzeigen Scanner
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import subprocess
import logging
import sys
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª–µ–π
if 'KleinanzeigenConfig' in sys.modules:
    del sys.modules['KleinanzeigenConfig']

import KleinanzeigenConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

LOG_FILE = "kleinanzeigen_scanner.log"
SCANNER_SCRIPT = "kleinanzeigen_scanner.py"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = """
ü§ñ <b>Kleinanzeigen Scanner Bot</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status2 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
/threadid2 - –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–æ–ø–∏–∫–æ–≤
/restart2 - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
/log2 - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞

<i>–ë–æ—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç Kleinanzeigen.de –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.</i>
    """
    await update.message.reply_text(help_text, parse_mode='HTML')

async def show_threadid2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–æ–ø–∏–∫–æ–≤"""
    try:
        thread_text = "üéØ <b>ID —Ç–æ–ø–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n\n"
        for name, config in KleinanzeigenConfig.topics.items():
            thread_text += f"‚Ä¢ <b>{name}</b>\n"
            thread_text += f"  Thread ID: <code>{config['thread_id']}</code>\n"
            thread_text += f"  –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {config.get('summary_count', 5)}\n\n"
        
        await update.message.reply_text(thread_text, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_log2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
    try:
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
                last_lines = lines[-20:] if len(lines) >= 20 else lines
                log_text = ''.join(last_lines)
                
            if log_text:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                import html
                log_text = html.escape(log_text)
                
                message = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:</b>\n\n<pre>{log_text}</pre>"
                if len(message) > 4000:
                    message = message[:4000] + "...\n<i>[–æ–±—Ä–µ–∑–∞–Ω–æ]</i>"
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text("üìã –õ–æ–≥ —Ñ–∞–π–ª –ø—É—Å—Ç")
        else:
            await update.message.reply_text("‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_status2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    try:
        scanner_running = False
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Windows
            result = subprocess.run(["tasklist", "/fi", "IMAGENAME eq python.exe"], capture_output=True, text=True)
            if SCANNER_SCRIPT in result.stdout or "kleinanzeigen_scanner" in result.stdout:
                scanner_running = True
        except:
            pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∞
        log_lines = 0
        if os.path.exists(LOG_FILE):
            try:
                with open(LOG_FILE, 'r') as f:
                    log_lines = sum(1 for _ in f)
            except:
                pass
        
        status_text = f"""
üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å Kleinanzeigen Scanner</b>

ü§ñ –°–∫–∞–Ω–µ—Ä: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if scanner_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìÑ –õ–æ–≥ —Ñ–∞–π–ª: {'üü¢ –ù–∞–π–¥–µ–Ω' if os.path.exists(LOG_FILE) else 'üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω'}
‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'üü¢ –ù–∞–π–¥–µ–Ω–∞' if os.path.exists("KleinanzeigenConfig.py") else 'üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìù –°—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ: {log_lines}
üîß –¢–æ–ø–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(KleinanzeigenConfig.topics)}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restart2 –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        """
        await update.message.reply_text(status_text, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def restart_scanner2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    try:
        await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Windows
            subprocess.run(["taskkill", "/f", "/im", "python.exe"], check=False)
            await update.message.reply_text("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except:
            pass
        
        import time
        time.sleep(3)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'KleinanzeigenConfig' in sys.modules:
            del sys.modules['KleinanzeigenConfig']
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        import importlib
        import KleinanzeigenConfig
        importlib.reload(KleinanzeigenConfig)
        
        await update.message.reply_text(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {len(KleinanzeigenConfig.topics)}")
        
        # –ó–∞–ø—É—Å–∫ –¥–ª—è Windows —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        import os
        current_dir = os.path.dirname(os.path.abspath(__file__))
        scanner_path = os.path.join(current_dir, SCANNER_SCRIPT)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–∫–∞–Ω–µ—Ä–∞
        if not os.path.exists(scanner_path):
            await update.message.reply_text(f"‚ùå –§–∞–π–ª {SCANNER_SCRIPT} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        process = subprocess.Popen(
            ["python", scanner_path], 
            shell=True, 
            cwd=current_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        await update.message.reply_text(f"‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω! PID: {process.pid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        time.sleep(2)
        if process.poll() is None:
            await update.message.reply_text("üîç –°–∫–∞–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, —á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏
            stdout, stderr = process.communicate()
            error_msg = stderr.decode('utf-8', errors='ignore') if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await update.message.reply_text(f"‚ùå –°–∫–∞–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:\n{error_msg[:500]}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if "Conflict" in str(context.error):
        logger.error("Bot conflict detected - another instance may be running")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ Kleinanzeigen Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
    logger.info("Kleinanzeigen Telegram Bot started")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    application = Application.builder().token(KleinanzeigenConfig.telegram_bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("threadid2", show_threadid2))
    application.add_handler(CommandHandler("log2", show_log2))
    application.add_handler(CommandHandler("status2", show_status2))
    application.add_handler(CommandHandler("restart2", restart_scanner2))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
    max_retries = 3
    for attempt in range(max_retries):
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{max_retries}...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except Exception as e:
            logger.error(f"Bot error attempt {attempt + 1}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}: {e}")
            
            if "Conflict" in str(e) and attempt < max_retries - 1:
                print(f"üîÑ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ñ–¥–µ–º {10 * (attempt + 1)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                import time
                time.sleep(10 * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                application = Application.builder().token(KleinanzeigenConfig.telegram_bot_token).build()
                application.add_handler(CommandHandler("start", start))
                application.add_handler(CommandHandler("threadid2", show_threadid2))
                application.add_handler(CommandHandler("log2", show_log2))
                application.add_handler(CommandHandler("status2", show_status2))
                application.add_handler(CommandHandler("restart2", restart_scanner2))
                application.add_error_handler(error_handler)
            else:
                print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                break

if __name__ == "__main__":
    main()
